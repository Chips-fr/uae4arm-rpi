
PLATFLAGS :=

ifeq ($(platform),)
platform = unix
endif

TARGET_NAME := uae4arm

CORE_DIR  := .
ROOT_DIR  := .

	# Default (ARM) unix
ifneq (,$(findstring unix,$(platform)))
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	LDFLAGS := -lz -lpthread -lFLAC -lmpg123 -ldl
	SHARED := -shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T 
	ifneq (,$(findstring neon,$(platform)))
		# Uncomment below for compilation on rpi
		#CPU_FLAGS += -mfpu=neon -march=armv7-a
		CFLAGS += $(PLATFORM_DEFINES)
		MORE_CFLAGS += -DARMV6T2 -DARM_HAS_DIV
		HAVE_NEON = 1
		USE_PICASSO96 = 1
		CPU_FLAGS +=  -marm
	endif
	ifneq (,$(findstring aarch64,$(platform)))
		AARCH64 = 1
		MORE_CFLAGS += -DCPU_AARCH64
	endif
else ifeq ($(platform), crosspi)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic = -fPIC
	SHARED :=-shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T -Wl,--no-undefined -L ../usr/lib -static-libstdc++ -static-libgcc
	PLATFORM_DEFINES += -marm -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	CPU_FLAGS +=  -marm -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -D__arm__
	MORE_CFLAGS += -DARMV6T2 -DARM_HAS_DIV

	PLATFORM_DEFINES += -I ../usr/include
	HAVE_NEON = 1
	USE_PICASSO96 = 1
	CFLAGS += $(PLATFORM_DEFINES)
	CXXFLAGS += $(PLATFORM_DEFINES)
	CC = arm-linux-gnueabihf-gcc
	CXX = arm-linux-gnueabihf-g++ 
	LDFLAGS += -lz -lpthread
else ifeq ($(platform), crossand)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic = -fPIC
	SHARED :=-shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T -Wl,--no-undefined -L ../usr/lib -static-libstdc++ -static-libgcc  
	PLATFORM_DEFINES +=  -marm  -march=armv7-a -mfloat-abi=softfp -mfpu=neon
	CPU_FLAGS += -marm  -march=armv7-a -mfloat-abi=softfp -mfpu=neon -D__arm__ 

	MORE_CFLAGS += -DARMV6T2 -DARM_HAS_DIV
	#-march=armv7-a -mfloat-abi=hard -mhard-float  
	#-mfpu=neon
	#-mfpu=neon-vfpv4 -mfloat-abi=hard

	HAVE_NEON = 1
	USE_PICASSO96 = 1
	CFLAGS += $(PLATFORM_DEFINES)
	CXXFLAGS += $(PLATFORM_DEFINES)
	CC = arm-linux-androideabi-gcc
	CXX =arm-linux-androideabi-g++ 
	AR = @arm-linux-androideabi-ar
	LD = @arm-linux-androideabi-g++ 
	LDFLAGS += -lz -llog
else ifeq ($(platform), rpi3)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic = -fPIC
	SHARED :=-shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T -Wl,--no-undefined
	PLATFORM_DEFINES += -marm -mcpu=cortex-a53 -mfpu=neon-fp-armv8  -mfloat-abi=hard
	CPU_FLAGS +=  -marm -mcpu=cortex-a53 -mfpu=neon-vfpv4 -mfloat-abi=hard -D__arm__
	MORE_CFLAGS += -DARMV6T2 -DARM_HAS_DIV

	HAVE_NEON = 1
	USE_PICASSO96 = 1
	CFLAGS += $(PLATFORM_DEFINES)
	CXXFLAGS += $(PLATFORM_DEFINES)
	CC = gcc
	CXX = g++ 
	LDFLAGS += -lz -lpthread -lFLAC -lmpg123 -ldl
else ifeq ($(platform), rpi2)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic = -fPIC
	SHARED :=-shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T -Wl,--no-undefined
	PLATFORM_DEFINES += -marm -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	CPU_FLAGS +=  -marm -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -D__arm__
	MORE_CFLAGS += -DARMV6T2 -DARM_HAS_DIV

	HAVE_NEON = 1
	USE_PICASSO96 = 1
	CFLAGS += $(PLATFORM_DEFINES)
	CXXFLAGS += $(PLATFORM_DEFINES)
	CC = gcc
	CXX = g++ 
	LDFLAGS += -lz -lpthread -lFLAC -lmpg123 -ldl

	# use for raspberry pi
else ifeq ($(platform), rpi) 
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	LDFLAGS := -lz -lpthread
	PLATFLAGS +=  -DARM  -marm
	SHARED := -shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T 
# Classic Platforms ####################
# Platform affix = classic_<ISA>_<ÂµARCH>
# Help at https://modmyclassic.com/comp

# (armv7 a7, hard point, neon based) ### 
# NESC, SNESC, C64 mini 
else ifeq ($(platform), classic_armv7_a7)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	SHARED :=-shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T -Wl,--no-undefined
	MORE_CFLAGS += -DARMV6T2 -DARM_HAS_DIV
	HAVE_NEON = 1
	USE_PICASSO96 = 1
	CPU_FLAGS += -DARM -Ofast \
	-flto=4 -fwhole-program -fuse-linker-plugin \
	-fdata-sections -ffunction-sections -Wl,--gc-sections \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	CXXFLAGS += $(CPU_FLAGS)
	CPPFLAGS += $(CPU_FLAGS)
	ifeq ($(shell echo `$(CC) -dumpversion` "< 4.9" | bc -l), 1)
		CFLAGS += -march=armv7-a
	else
		CFLAGS += -march=armv7ve
		# If gcc is 5.0 or later
		ifeq ($(shell echo `$(CC) -dumpversion` ">= 5" | bc -l), 1)
			LDFLAGS += -static-libgcc -static-libstdc++
		endif
	endif
# (armv8 a35, hard point, neon based) ###
# PS Classic
else ifeq ($(platform), classic_armv8_a35)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	SHARED :=-shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T -Wl,--no-undefined
	MORE_CFLAGS += -DARMV6T2 -DARM_HAS_DIV
	HAVE_NEON = 1
	USE_PICASSO96 = 1
	CPU_FLAGS += -DARM -Ofast \
	-flto=4 -fwhole-program -fuse-linker-plugin \
	-fdata-sections -ffunction-sections -Wl,--gc-sections \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a35 -mfpu=neon-fp-armv8 -mfloat-abi=hard
	CXXFLAGS += $(CPU_FLAGS)
	CPPFLAGS += $(CPU_FLAGS)
	ifeq ($(shell echo `$(CC) -dumpversion` "< 4.9" | bc -l), 1)
		CFLAGS += -march=armv8-a
	else
		CFLAGS += -march=armv8-a
		# If gcc is 5.0 or later
		ifeq ($(shell echo `$(CC) -dumpversion` ">= 5" | bc -l), 1)
			LDFLAGS += -static-libgcc -static-libstdc++
		endif
	endif
else ifeq ($(platform), android)
	CC = arm-linux-androideabi-gcc
	CXX =arm-linux-androideabi-g++
	AR = @arm-linux-androideabi-ar
	LD = @arm-linux-androideabi-g++ 
	TARGET := $(TARGET_NAME)_libretro_android.so
	fpic := -fPIC
	LDFLAGS := -lz -lm -llog
	SHARED :=  -Wl,--fix-cortex-a8 -shared -Wl,--version-script=$(CORE_DIR)/libretro/link.T -Wl,--no-undefined
	PLATFLAGS += -DANDROID -DRETRO -DAND -DANDPORT -DARM_OPT_TEST=1
endif


GIT_VERSION := $(shell git rev-parse --short HEAD 2>/dev/null)
ifneq ($(GIT_VERSION),)
	MORE_CFLAGS += -DGIT_VERSION=$(GIT_VERSION)
endif


ifeq ($(DEBUG), 1)
	CFLAGS += -O0 -g -DWITH_LOGGING
else
	CFLAGS += -O3 -fomit-frame-pointer -finline
endif

ifneq ($(AARCH64), 1)
    DEFS += -DARMV6_ASSEMBLY
endif

DEFS += -DPANDORA -DRASPBERRY -DWITH_INGAME_WARNING

ifeq ($(USE_PICASSO96), 1)
	DEFS += -DPICASSO96
endif

ifeq ($(HAVE_NEON), 1)
	DEFS += -DUSE_ARMNEON
endif

DEFINES += -D__LIBRETRO__ $(DEFS) $(MORE_CFLAGS)
#-std=gnu99 
CFLAGS += $(DEFINES) -DINLINE="inline" $(CPU_FLAGS) -fexceptions -fpermissive

include Makefile.common

OBJECTS += $(SOURCES_C:.c=.o) $(SOURCES_CXX:.cpp=.o) $(SOURCES_ASM:.S=.o)

INCDIRS := $(EXTRA_INCLUDES) $(INCFLAGS)

OBJECTS += $(OBJS)

ASFLAGS += $(CPU_FLAGS)

all: $(TARGET)

CAPS = capsimg.so

capsimg.so: capsimg
	(cd capsimg ; ./bootstrap ; ./configure --host=arm ; $(MAKE) ; cp capsimg.so ../ )

$(TARGET): $(OBJECTS) $(CAPS)
	$(CXX) $(fpic) $(SHARED) $(INCDIRS) -o $@ $(OBJECTS) $(LDFLAGS)

$(EMU)/od-pandora/neon_helper.o: $(EMU)/od-pandora/neon_helper.s
	$(CXX) $(ASFLAGS) -Wall -o $(EMU)/od-pandora/neon_helper.o -c $(EMU)/od-pandora/neon_helper.s

$(EMU)/od-pandora/arm_helper.o: $(EMU)/od-pandora/arm_helper.s
	$(CXX) $(ASFLAGS) -Wall -o $(EMU)/od-pandora/arm_helper.o -c $(EMU)/od-pandora/arm_helper.s

$(EMU)/od-pandora/aarch64_helper.o: $(EMU)/od-pandora/aarch64_helper.s
	$(CXX) $(ASFLAGS) -Wall -o $(EMU)/od-pandora/aarch64_helper.o -c $(EMU)/od-pandora/aarch64_helper.s

%.o: %.cpp
	$(CXX) $(fpic) $(CFLAGS) $(PLATFLAGS) $(INCDIRS) -c -o $@ $<

%.o: %.c
	$(CC) $(fpic) $(CFLAGS) $(PLATFLAGS) $(INCDIRS) -c -o $@ $<

%.o: %.S
	$(CC_AS) $(CFLAGS)  $(PLATFLAGS) -c $^ -o $@

clean:
	rm -f $(OBJECTS) $(TARGET) 
	(cd capsimg ; make clean )

.PHONY: clean

